format_version: 1.0.0
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - BIN_NAME: stepman
  - GITHUB_RELEASES_URL: https://github.com/bitrise-io/$BIN_NAME/releases

  - INTERNAL_DEV_SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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
  - INTERNAL_DEV_SLACK_CHANNEL: bitrise-devs
  - INTERNAL_DEV_LIFELINE_SLACK_CHANNEL: bitrise-dev-lifeline

trigger_map:
- pattern: '*'
  is_pull_request_allowed: true
  workflow: ci

workflows:
  # ----------------------------------------------------------------
  # --- workflows for CI and testing
  ci:
    title: Stepman CI
    description: |-
      1, Install testing tools
      2, Run tests
      3, Announce test result
    before_run:
    - _prepare_and_setup
    - test
    steps:
    - slack:
        title: Slack notifications
        run_if: .IsCI
        inputs:
        - webhook_url: $INTERNAL_DEV_SLACK_WEBHOOK_URL
        - channel: $INTERNAL_DEV_LIFELINE_SLACK_CHANNEL
        - from_username: ${BIN_NAME} - CI - OK
        - from_username_on_error: ${BIN_NAME} - CI - ERROR
        - message: |-
            CI was successful on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}
        - message_on_error: |-
            CI FAILED on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}

  test:
    title: Stepman test
    description: |-
      1, Err Check
      2, Go Lint
      3, Go Test
    steps:
    - script:
        title: Print infos for the test
        inputs:
        - content: |-
            set -x
            go version
            echo $GO15VENDOREXPERIMENT
    - script:
        title: Go list without vendor
        inputs:
        - content: |-
            set -e
            set -x
            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Err check
        inputs:
        - content: errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go Lint
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"
    - script:
        title: Go Test
        inputs:
        - content: go test ./...

  _prepare_and_setup:
    title: Install required testing tools
    description: |-
        1, Install godep
        2, Install errcheck
        3, Install golint
    steps:
    - script:
        title: Install required testing tools
        run_if: .IsCI
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            # Install dependencies
            go get -u github.com/tools/godep

            # Check for unhandled errors
            go get -u github.com/kisielk/errcheck

            # Go lint
            go get -u github.com/golang/lint/golint

  # ----------------------------------------------------------------
  # --- workflows for Releasing
  create_release:
    title: Create Release with auto version bump
    description: |-
        Creates new version with auto patch version bump based on last git version tag

        1, Create CHANGELOG and git release
        2, Export RELEASE_VERSION
        3, Create binaries
    after_run:
    - _export_release_version
    - _create_binaries
    steps:
    - script:
        title: Create CHANGELOG and git release
        inputs:
        - content: |-
            #!/bin/bash
            set -e

            export CI=true
            releaseman create-changelog \
              --bump-version patch \
              --set-version-script "bash _scripts/set_version.sh version/version.go"

  create_release_version:
    title: Create Release version
    description: |-
        Creates new version with specified RELEASE_VERSION environment

        1, Create CHANGELOG and git release
        2, Export RELEASE_VERSION
        3, Create binaries
    envs:
    - RELEASE_VERSION: 1.3.0
    after_run:
    - _export_release_version
    - _create_binaries
    steps:
    - script:
        title: Create CHANGELOG and git release
        inputs:
        - content: |-
            #!/bin/bash
            set -e

            export CI=true
            releaseman create-changelog
              --version $RELEASE_VERSION \
              --set-version-script "bash _scripts/set_version.sh version/version.go"

  announce-release:
    title: Announce Release
    description: |-
      Notifying about new version of stepman

      1, Export RELEASE_VERSION
      2, Send Slack notifications
    steps:
    - slack@2.1.0:
        inputs:
        - webhook_url: $INTERNAL_DEV_SLACK_WEBHOOK_URL
        - channel: $INTERNAL_DEV_SLACK_CHANNEL
        - from_username: ${BIN_NAME}
        - message: |
            Release v${RELEASE_VERSION} was just published! :tada:

            You can find it at ${GITHUB_RELEASES_URL}
        - emoji: ':rocket:'

  _export_release_version:
    title: Export release version
    description: |
        Exports RELEASE_VERSION from ./version/version.go
    steps:
    - script:
        title: Export RELEASE_VERSION
        inputs:
        - content: |
            #!/bin/bash
            set -e

            RELEASE_VERSION=$(go run _scripts/get_version.go -file ./version/version.go)
            echo "RELEASE_VERSION: $RELEASE_VERSION"

            envman add --key RELEASE_VERSION --value $RELEASE_VERSION

  _create_binaries:
    title: Create binaries
    description: |
        Creates Linux and Darwin binaries
    steps:
    - script:
        title: Create binaries
        inputs:
        - content: |
            #!/bin/bash
            set -e

            echo
            echo "Create final binaries"

            export ARCH=x86_64
            export GOARCH=amd64

            # Create Darwin bin
            export OS=Darwin
            export GOOS=darwin

            BIN_NAME=$BIN_NAME-$OS-$ARCH
            DEPLOY_PATH="_bin/$RELEASE_VERSION/$BIN_NAME-$OS-$ARCH"
            echo "  Create final Darwin binary at: $DEPLOY_PATH"

            go build -o "$DEPLOY_PATH"

            # Create Linux binary
            export OS=Linux
            export GOOS=linux

            BIN_NAME=$BIN_NAME-$OS-$ARCH
            DEPLOY_PATH="_bin/$RELEASE_VERSION/$BIN_NAME-$OS-$ARCH"
            echo "  Create final Linux binary at: $DEPLOY_PATH"

            go build -o "$DEPLOY_PATH"

  # ----------------------------------------------------------------
  # --- workflows for Utility
  delete-stepman-dir:
    steps:
    - script:
        title: Delete local stepman dir
        inputs:
        - content: |-
            #!/bin/bash
            set -v
            set -e
            rm -rf ~/.stepman

  regenerate-default-collection:
    before_run:
    - delete-stepman-dir
    envs:
    - DEFAULT_STEPLIB_GIT: https://github.com/bitrise-io/bitrise-steplib.git
    steps:
    - script:
        title: Setup stepman
        inputs:
        - content: |-
            #!/bin/bash
            set -v
            set -e
            stepman setup -c ${DEFAULT_STEPLIB_GIT}

  godeps-update:
    title: Godeps update
    description: |
      Used for updating bitrise dependencies with godep
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            go get -u ./...
            rm -rf ./Godeps
            godep save ./...
